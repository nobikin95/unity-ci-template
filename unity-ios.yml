variables:
  IOS_DEVELOPMENT_TEAM: "RN7J7SQGUH"
  XCODE_DERIVED_DATA_PATH: "$CI_PROJECT_DIR/DerivedData"

.common_before_script: &common_before_script
  - git clean -fdx
  - git config url."https://thanhtq:$GITLAB_CONFIG@gitlab.ikameglobal.com".insteadOf "https://gitlab.ikameglobal.com"
  - git submodule sync
  - git submodule update --init --recursive --checkout
  - git submodule foreach 'git reset --hard'
  - git submodule foreach 'git clean -fdx'
  - echo "Setting up environment for iOS build..."
  - export PROJECT_UNITY_VERSION=$(grep "m_EditorVersion:" ProjectSettings/ProjectVersion.txt | awk '{print $2}')
  - echo "Unity version from ProjectSettings ${PROJECT_UNITY_VERSION}"
  - if [ -d "/Applications/Unity/Hub/Editor" ]; then export UNITY_INSTALLED_VERSIONS=$(ls /Applications/Unity/Hub/Editor); fi
  - echo "Available Unity versions... ${UNITY_INSTALLED_VERSIONS}"
  - export UNITY_VERSION=$(echo "$UNITY_INSTALLED_VERSIONS" | grep -E "^${PROJECT_UNITY_VERSION}" | head -n 1)
  - | # Use block scalar for multi-line if
    if [ -z "$UNITY_VERSION" ]; then
      echo "Exact version not found. Selecting closest version available...";
      export UNITY_VERSION=$(echo "$UNITY_INSTALLED_VERSIONS" | tr ' ' '\n' | sort -V | grep "^${PROJECT_UNITY_VERSION%.*}" | tail -n 1);
    fi
  - export UNITY_PATH="/Applications/Unity/Hub/Editor/${UNITY_VERSION}/Unity.app/Contents/MacOS/Unity"
  - echo "Using Unity version ${UNITY_VERSION}"
  - | # Use block scalar for multi-line if with error handling
    if [ ! -f "$UNITY_PATH" ]; then
      echo "Error... Unity executable not found at $UNITY_PATH";
      python3 Assets/cicd/ci/send_slack_webhook.py build_fail project_name="$PROJECT_NAME" platform="üçèiOS" build_type="$BUILD_TYPE" version="$CURRENT_VERSION";
      python3 Assets/cicd/ci/send_slack_direct_message.py build_fail project_name="$PROJECT_NAME" platform="üçèiOS" build_type="$BUILD_TYPE" version="$CURRENT_VERSION" notify_user="$NOTIFY_DEV" log_file="$CI_PROJECT_DIR/build_output.log";
      exit 1;
    fi
  - export CURRENT_VERSION=$IOS_VERSION
  - export MAJOR_VERSION=$(echo $CURRENT_VERSION | cut -d '.' -f1)
  - export MINOR_VERSION=$(echo $CURRENT_VERSION | cut -d '.' -f2)
  - export PATCH_VERSION=$(echo $CURRENT_VERSION | cut -d '.' -f3)
  - sed -i '' "s/\(bundleVersion:\).*/\1 \"$CURRENT_VERSION\"/" ProjectSettings/ProjectSettings.asset
  - sed -i '' "s/\(m_ShowUnitySplashLogo:\).*/\1 0/" ProjectSettings/ProjectSettings.asset
  - echo "Updated bundleVersion in ProjectSettings.asset to $CURRENT_VERSION"
  - grep "bundleVersion:" ProjectSettings/ProjectSettings.asset
  - echo "Updated m_ShowUnitySplashLogo in ProjectSettings.asset to 0"
  - grep "m_ShowUnitySplashLogo:" ProjectSettings/ProjectSettings.asset

.common_update_version: &common_update_version
  - echo "Updating IOS_VERSION in GitLab CI/CD Variables..."
  - export PATCH_VERSION=$((PATCH_VERSION + 1))
  - | # Use block scalar for multi-line if
    if [ "$PATCH_VERSION" -gt 99 ]; then
      export PATCH_VERSION=0;
      export MINOR_VERSION=$((MINOR_VERSION + 1));
    fi
  - | # Use block scalar for multi-line if
    if [ "$MINOR_VERSION" -gt 99 ]; then
      export MINOR_VERSION=0;
      export MAJOR_VERSION=$((MAJOR_VERSION + 1));
    fi
  - export NEW_VERSION="${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}"
  - echo "Next IOS_VERSION will be $NEW_VERSION"
  - 'curl --fail -X PUT -H "PRIVATE-TOKEN: $GITLAB_API_TOKEN" -d "value=$NEW_VERSION" "https://gitlab.ikameglobal.com/api/v4/projects/$CI_PROJECT_ID/variables/IOS_VERSION"'

build_ios_release:
  stage: build_ios
  before_script:
    - export BUILD_TYPE="‚úàÔ∏èTestflight"
    - *common_before_script
    # Define the shell function directly here using the content alias
    - |
      handle_xcode_error() {
        error_message="$1" # First argument is the error message
        log_file="$2"      # Second argument is the log file (optional)
        echo "-----------------------------------------------------"
        echo "[ERROR] $error_message"
        if [ -n "$log_file" ] && [ -f "$log_file" ]; then
          echo "Last 50 lines of $log_file:"
          tail -n 50 "$log_file"
        fi
        echo "-----------------------------------------------------"
        python3 "$CI_PROJECT_DIR/Assets/cicd/ci/send_slack_webhook.py" build_fail project_name="$PROJECT_NAME" platform="üçèiOS" build_type="$BUILD_TYPE" version="$CURRENT_VERSION"
        if [ -n "$NOTIFY_DEV" ]; then
          python3 "$CI_PROJECT_DIR/Assets/cicd/ci/send_slack_direct_message.py" build_fail project_name="$PROJECT_NAME" platform="üçèiOS" build_type="$BUILD_TYPE" version="$CURRENT_VERSION" notify_user="$NOTIFY_DEV" log_file="$CI_PROJECT_DIR/build_output.log"
        fi
        exit 1
      }
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
      - api_failure
      - unknown_failure
      - script_failure
  tags:
    - macos
  timeout: 60m
  rules:
    - if: '$CI_COMMIT_TAG =~ /^ios-release\/bundle.*$/'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual
  script:
    # Update Scripting Symbol
    - chmod +x Assets/cicd/ci/update_scripting_symbols.sh
    - Assets/cicd/ci/update_scripting_symbols.sh --add_define_symbol=$ADD_DEFINE_SYMBOLS --remove_define_symbol=$REMOVE_DEFINE_SYMBOLS
    - echo "Starting iOS .ipa build..."
    - mkdir -p Build/iOS
    - python3 Assets/cicd/ci/send_slack_webhook.py build_start project_name="$PROJECT_NAME" platform="üçèiOS" build_type="$BUILD_TYPE" version="$CURRENT_VERSION"
    - python3 Assets/cicd/ci/send_slack_direct_message.py build_start project_name="$PROJECT_NAME" platform="üçèiOS" notify_user="$NOTIFY_DEV" build_type="$BUILD_TYPE" version="$CURRENT_VERSION"
    - |
      # Function to perform Unity build with framework verification retry
      perform_unity_build_with_retry() {
        local max_retries=10
        local retry_count=0

        while [ $retry_count -lt $max_retries ]; do
          echo "üîÑ Unity build attempt $((retry_count + 1))/$max_retries"

          # Clean previous build
          if [ $retry_count -gt 0 ]; then
            echo "üßπ Cleaning previous build..."
            rm -rf Build/iOS
          fi

          # Unity build
          echo "Running Unity build command with UNITY_PATH=$UNITY_PATH"
          $UNITY_PATH -projectPath $CI_PROJECT_DIR -buildTarget iOS -executeMethod BuildScript.BuildiOS -logFile $CI_PROJECT_DIR/build_output.log -batchmode -nographics -silent-crashes -quit || {
            echo "Unity build failed. Output log:";
            tail -n 50 $CI_PROJECT_DIR/build_output.log;
            python3 Assets/cicd/ci/send_slack_webhook.py build_fail project_name="$PROJECT_NAME" platform="üçèiOS" build_type="$BUILD_TYPE" version="$CURRENT_VERSION";
            python3 Assets/cicd/ci/send_slack_direct_message.py build_fail project_name="$PROJECT_NAME" platform="üçèiOS" build_type="$BUILD_TYPE" version="$CURRENT_VERSION" notify_user="$NOTIFY_DEV" log_file="$CI_PROJECT_DIR/build_output.log";
            exit 1;
          }

          echo "Unity build completed. Checking Build/iOS directory contents:"
          ls -l Build/iOS/

          # Check if Xcode project exists
          if [ ! -d "Build/iOS/Unity-iPhone.xcodeproj" ]; then
            echo "Error... Xcode project not found in Build/iOS directory after Unity build.";
            python3 Assets/cicd/ci/send_slack_webhook.py build_fail project_name="$PROJECT_NAME" platform="üçèiOS" build_type="$BUILD_TYPE" version="$CURRENT_VERSION";
            python3 Assets/cicd/ci/send_slack_direct_message.py build_fail project_name="$PROJECT_NAME" platform="üçèiOS" build_type="$BUILD_TYPE" version="$CURRENT_VERSION" notify_user="$NOTIFY_DEV" log_file="$CI_PROJECT_DIR/build_output.log";
            exit 1;
          fi

          echo "Validating Xcode project file..."
          plutil -lint Build/iOS/Unity-iPhone.xcodeproj/project.pbxproj || {
            echo "The Xcode project file has syntax errors.";
            python3 Assets/cicd/ci/send_slack_webhook.py build_fail project_name="$PROJECT_NAME" platform="üçèiOS" build_type="$BUILD_TYPE" version="$CURRENT_VERSION";
            python3 Assets/cicd/ci/send_slack_direct_message.py build_fail project_name="$PROJECT_NAME" platform="üçèiOS" build_type="$BUILD_TYPE" version="$CURRENT_VERSION" notify_user="$NOTIFY_DEV" log_file="$CI_PROJECT_DIR/build_output.log";
            exit 1;
          }

          echo "‚ö° Running Xcode Framework Verification..."
          chmod +x Assets/cicd/ci/verify_frameworks.sh

          # Ch·∫°y verify_frameworks.sh v·ªõi error handling
          echo ""
          echo "üîç Starting framework verification..."
          if Assets/cicd/ci/verify_frameworks.sh; then
            echo ""
            echo "‚úÖ Framework verification passed!"
            echo "üéâ All required frameworks are present and correctly configured!"
            echo ""
            break
          else
            verify_exit_code=$?
            echo ""
            echo "‚ùå Framework verification failed with exit code $verify_exit_code"
            echo ""

            retry_count=$((retry_count + 1))
            if [ $retry_count -lt $max_retries ]; then
              echo "üîÑ Retrying Unity build..."
              echo "üìã Missing frameworks detected. Will retry build..."
              echo "üîß BuildScript.cs should automatically add all required frameworks"
              echo "‚è≥ Waiting 10 seconds before retry..."
              sleep 10
            else
              echo ""
              echo "‚ùå Framework verification failed after $max_retries attempts."
              echo "üìã Final missing frameworks:"
              echo ""
              Assets/cicd/ci/verify_frameworks.sh || echo "Framework verification script failed"
              echo ""
              echo "üí° This might indicate an issue with the BuildScript.cs post-processing"
              echo "‚ö†Ô∏è Continuing with build despite framework verification issues..."
              echo ""
              break
            fi
          fi
        done
      }

      # Execute the build function
      perform_unity_build_with_retry
    - echo "Done..."

    # Th√™m validation sau khi verify_frameworks.sh
    - echo "Validating Xcode project after framework verification..."
    - |
      plutil -lint Build/iOS/Unity-iPhone.xcodeproj/project.pbxproj || {
        echo "Xcode project file has syntax errors after framework verification.";
        echo "Attempting to restore from backup or rebuild...";
        # N·∫øu c√≥ backup, restore l·∫°i
        if [ -f "Build/iOS/Unity-iPhone.xcodeproj/project.pbxproj.backup" ]; then
          cp "Build/iOS/Unity-iPhone.xcodeproj/project.pbxproj.backup" "Build/iOS/Unity-iPhone.xcodeproj/project.pbxproj";
          echo "Restored project.pbxproj from backup.";
        else
          echo "No backup found. Project file may be corrupted.";
          python3 Assets/cicd/ci/send_slack_webhook.py build_fail project_name="$PROJECT_NAME" platform="üçèiOS" build_type="$BUILD_TYPE" version="$CURRENT_VERSION";
          python3 Assets/cicd/ci/send_slack_direct_message.py build_fail project_name="$PROJECT_NAME" platform="üçèiOS" build_type="$BUILD_TYPE" version="$CURRENT_VERSION" notify_user="$NOTIFY_DEV" log_file="$CI_PROJECT_DIR/build_output.log";
          exit 1;
        fi
      }
    - echo "Xcode project validation passed after framework verification."

    # Fetch changelog for iOS release tags
    - echo "Fetching changelog for iOS release build..."
    - |
      if [[ "$CI_COMMIT_TAG" =~ ^ios-release/bundle.*$ ]]; then
        echo "Detected iOS release tag. Fetching changelog...";

        # Determine target branch (ios-release)
        TARGET_BRANCH="ios-release"
        echo "Target branch: $TARGET_BRANCH"

        # Fetch merge request info
        MR_API_URL="https://gitlab.ikameglobal.com/api/v4/projects/$CI_PROJECT_ID/merge_requests?state=merged&target_branch=$TARGET_BRANCH&order_by=updated_at&sort=desc"
        echo "Fetching merge request info from: $MR_API_URL"

        MERGE_REQUEST_INFO=$(curl --silent --header "PRIVATE-TOKEN: $GITLAB_API_TOKEN" "$MR_API_URL" | jq '.[0]')

        if [[ -n "$MERGE_REQUEST_INFO" && "$MERGE_REQUEST_INFO" != "null" ]]; then
          echo "Found merge request. Extracting description..."
          MR_DESCRIPTION=$(echo "$MERGE_REQUEST_INFO" | jq -r '.description')

          if [[ -n "$MR_DESCRIPTION" && "$MR_DESCRIPTION" != "null" && "$MR_DESCRIPTION" =~ "## Change Log" ]]; then
            echo "Found Change Log section in merge request description."
            # Extract changelog between "## Change Log" and next section (starting with ##)
            # Using awk for better compatibility with both GNU sed (Linux) and BSD sed (macOS)
            CHANGELOG=$(echo "$MR_DESCRIPTION" | awk '/## Change Log/,/^## [^C]/ {if (/^## [^C]/) exit; print}')

            # Get merger info
            MERGER_NAME=$(echo "$MERGE_REQUEST_INFO" | jq -r '.merged_by.name')
            MERGER_USERNAME=$(echo "$MERGE_REQUEST_INFO" | jq -r '.merged_by.username')

            export CHANGELOG="$CHANGELOG"
            echo "$CHANGELOG" > changelog.tmp
            echo -e "\nMerged by: $MERGER_NAME (@$MERGER_USERNAME)" >> changelog.tmp
            export CHANGELOG=$(cat changelog.tmp)

            echo "Changelog extracted from merge request:"
            echo "================================"
            echo "$CHANGELOG"
            echo "================================"
          else
            echo "No valid Change Log found in merge request. Extracting from tag..."
            export CHANGELOG=$(git tag -l --format="%(contents)" "$CI_COMMIT_TAG")

            if [ -z "$CHANGELOG" ]; then
              echo "No changelog found in tag. Using commit message..."
              export CHANGELOG=$(git log -1 --pretty=%B)
            fi

            echo "Changelog extracted:"
            echo "================================"
            echo "$CHANGELOG"
            echo "================================"
          fi
        else
          echo "No merge request found. Extracting changelog from tag..."
          export CHANGELOG=$(git tag -l --format="%(contents)" "$CI_COMMIT_TAG")

          if [ -z "$CHANGELOG" ]; then
            echo "No changelog found in tag. Using commit message..."
            export CHANGELOG=$(git log -1 --pretty=%B)
          fi

          echo "Changelog extracted:"
          echo "================================"
          echo "$CHANGELOG"
          echo "================================"
        fi
      else
        echo "Not an iOS release tag. Using default changelog."
        export CHANGELOG="iOS build"
      fi

    - echo "Printing CHANGELOG value:"
    - echo "$CHANGELOG"
    - echo "$CHANGELOG" > changelog.txt

    - echo "Loading Slack message template..."
    - export MESSAGE_TEMPLATES_FILE="$CI_PROJECT_DIR/Assets/cicd/ci/message_templates.json"
    - | # Use block scalar for multi-line script
      template_key="build_start"
      if [ ! -f "$MESSAGE_TEMPLATES_FILE" ]; then
        echo "[ERROR] Message template file not found: $MESSAGE_TEMPLATES_FILE"
        exit 1
      fi
      message=$(jq -r --arg key "$template_key" '.[$key]' "$MESSAGE_TEMPLATES_FILE")

      if [ -z "$message" ] || [ "$message" == "null" ]; then
        echo "[ERROR] Message template not found for key: $template_key in $MESSAGE_TEMPLATES_FILE"
        exit 1
      fi

      start_build_message=$(printf "$message" | sed \
        -e "s/{project_name}/${PROJECT_NAME}/g" \
        -e "s/{platform}/üçèiOS/g" \
        -e "s/{build_type}/${BUILD_TYPE}/g" \
        -e "s/{version}/${CURRENT_VERSION}/g")

      echo "Formatted Slack message:"
      echo "$start_build_message"
    - python3 Assets/cicd/ci/send_slack_message.py "C07UU3A6H0R" "$start_build_message" "$SLACK_BOT_TOKEN"

    # Add step to clean DerivedData before Xcode build
    - echo "Ensuring clean build environment by removing previous DerivedData..."
    - rm -rf "$XCODE_DERIVED_DATA_PATH"

    - echo "Building .ipa file using Xcode with automatic signing..."
    - cd Build/iOS

    # Check and create workspace if needed
    - chmod +x "$CI_PROJECT_DIR/Assets/cicd/ci/create_workspace.sh"
    - "$CI_PROJECT_DIR/Assets/cicd/ci/create_workspace.sh"

    - | # Use block scalar for the entire multi-line if/then/else/fi block
      if [ -d "Unity-iPhone.xcworkspace" ]; then
        echo "Found Xcode workspace. Building with xcodebuild...";
        export ARCHIVE_PATH="$CI_PROJECT_DIR/Build/iOS/${PROJECT_NAME}_${CURRENT_VERSION}.xcarchive"
        export EXPORT_LOG_PATH="$CI_PROJECT_DIR/export_release.log"
        export ARCHIVE_LOG_PATH="$CI_PROJECT_DIR/archive_release.log"

        echo "Archiving to $ARCHIVE_PATH"
        xcodebuild -workspace Unity-iPhone.xcworkspace -scheme Unity-iPhone -configuration Release \
          -archivePath "$ARCHIVE_PATH" \
          -allowProvisioningUpdates -allowProvisioningDeviceRegistration \
          DEVELOPMENT_TEAM="$IOS_DEVELOPMENT_TEAM" \
          -quiet archive -derivedDataPath "$XCODE_DERIVED_DATA_PATH" \
          > "$ARCHIVE_LOG_PATH" 2>&1 || handle_xcode_error "Xcode archive step failed." "$ARCHIVE_LOG_PATH"
        echo "‚úÖ Archive completed successfully"

        echo "Exporting archive with automatic signing..."
        if [ ! -f "$CI_PROJECT_DIR/Assets/cicd/exportOptionsPlist.plist" ]; then
           handle_xcode_error "exportOptionsPlist.plist not found at $CI_PROJECT_DIR/Assets/cicd/"
        fi
        xcodebuild -exportArchive -archivePath "$ARCHIVE_PATH" \
          -exportPath "$CI_PROJECT_DIR/Build/iOS/ExportedIPA_Release" \
          -exportOptionsPlist "$CI_PROJECT_DIR/Assets/cicd/exportOptionsPlist.plist" \
          -allowProvisioningUpdates \
          -quiet \
          > "$EXPORT_LOG_PATH" 2>&1 || handle_xcode_error "Xcode export step failed." "$EXPORT_LOG_PATH"
        echo "‚úÖ Export completed successfully"

        echo "IPA file exported successfully to ExportedIPA_Release directory.";
      elif [ -d "Unity-iPhone.xcodeproj" ]; then
        echo "Found Xcode project. Building with xcodebuild...";
        export ARCHIVE_PATH="$CI_PROJECT_DIR/Build/iOS/${PROJECT_NAME}_${CURRENT_VERSION}.xcarchive"
        export EXPORT_LOG_PATH="$CI_PROJECT_DIR/export_release.log"
        export ARCHIVE_LOG_PATH="$CI_PROJECT_DIR/archive_release.log"

        echo "Archiving to $ARCHIVE_PATH"
        xcodebuild -project Unity-iPhone.xcodeproj -scheme Unity-iPhone -configuration Release \
          -archivePath "$ARCHIVE_PATH" \
          -allowProvisioningUpdates -allowProvisioningDeviceRegistration \
          DEVELOPMENT_TEAM="$IOS_DEVELOPMENT_TEAM" \
          -quiet archive -derivedDataPath "$XCODE_DERIVED_DATA_PATH" \
          > "$ARCHIVE_LOG_PATH" 2>&1 || handle_xcode_error "Xcode archive step failed." "$ARCHIVE_LOG_PATH"
        echo "‚úÖ Archive completed successfully"

        echo "Exporting archive with automatic signing..."
        if [ ! -f "$CI_PROJECT_DIR/Assets/cicd/exportOptionsPlist.plist" ]; then
           handle_xcode_error "exportOptionsPlist.plist not found at $CI_PROJECT_DIR"
        fi
        xcodebuild -exportArchive -archivePath "$ARCHIVE_PATH" \
          -exportPath "$CI_PROJECT_DIR/Build/iOS/ExportedIPA_Release" \
          -exportOptionsPlist "$CI_PROJECT_DIR/Assets/cicd/exportOptionsPlist.plist" \
          -allowProvisioningUpdates \
          -quiet \
          > "$EXPORT_LOG_PATH" 2>&1 || handle_xcode_error "Xcode export step failed." "$EXPORT_LOG_PATH"
        echo "‚úÖ Export completed successfully"

        echo "IPA file exported successfully to ExportedIPA_Release directory.";
      else
        handle_xcode_error "No Xcode workspace or project found in Build/iOS."
      fi

    # ========================================================================
    # Upload IPA to TestFlight using Fastlane - TEMPORARILY DISABLED
    # ========================================================================
    # NOTE: TestFlight upload is currently disabled for faster testing.
    #       To re-enable, uncomment the section below.
    # ========================================================================

    - cd "$CI_PROJECT_DIR"
    - echo "=================================================="
    - echo "‚è≠Ô∏è  SKIPPING TestFlight Upload (Disabled)"
    - echo "=================================================="
    - echo "‚ÑπÔ∏è  TestFlight upload is temporarily disabled"
    - echo "‚ÑπÔ∏è  Release IPA will only be uploaded to Slack"
    - echo "‚ÑπÔ∏è  To re-enable Uncomment TestFlight section in unity-ios.yml"
    - echo "=================================================="

    # Create empty log file for artifacts
    - echo "TestFlight upload skipped - $(date)" > fastlane_upload.log

    # Find IPA file for Slack upload
    - |
      IPA_FILE=$(find Build/iOS/ExportedIPA_Release -name "*.ipa" | head -1)
      if [ -z "$IPA_FILE" ]; then
        echo "‚ö†Ô∏è Warning: No IPA file found in Build/iOS/ExportedIPA_Release"
      else
        echo "Found IPA file: $IPA_FILE"
        IPA_SIZE=$(ls -lh "$IPA_FILE" | awk '{print $5}')
        echo "IPA file size: $IPA_SIZE"
      fi

    # ========================================================================
    # COMMENTED OUT: Upload IPA to TestFlight using Fastlane
    # ========================================================================
    # - cd "$CI_PROJECT_DIR"
    # - echo "=================================================="
    # - echo "üì§ Uploading IPA to TestFlight using Fastlane..."
    # - echo "=================================================="
    #
    # # Verify IPA file exists
    # - |
    #   IPA_FILE=$(find Build/iOS/ExportedIPA_Release -name "*.ipa" | head -1)
    #   if [ -z "$IPA_FILE" ]; then
    #     handle_xcode_error "No IPA file found in Build/iOS/ExportedIPA_Release"
    #   fi
    #   echo "Found IPA file: $IPA_FILE"
    #   IPA_SIZE=$(ls -lh "$IPA_FILE" | awk '{print $5}')
    #   echo "IPA file size: $IPA_SIZE"
    #
    # # Setup Fastlane
    # - echo "Setting up Fastlane configuration..."
    # - mkdir -p fastlane
    # - cp Assets/cicd/ci/deploy/Fastfile fastlane/Fastfile
    #
    # # Verify required environment variables
    # - |
    #   if [ -z "$APP_STORE_KEY_BASE64" ]; then
    #     handle_xcode_error "APP_STORE_KEY_BASE64 environment variable is not set"
    #   fi
    #   if [ -z "$APP_STORE_KEY_ID" ]; then
    #     handle_xcode_error "APP_STORE_KEY_ID environment variable is not set"
    #   fi
    #   if [ -z "$APP_STORE_ISSUER_ID" ]; then
    #     handle_xcode_error "APP_STORE_ISSUER_ID environment variable is not set"
    #   fi
    #   echo "‚úÖ All required environment variables are set"
    #   echo "üîç Debug: APP_STORE_KEY_ID = $APP_STORE_KEY_ID"
    #   echo "üîç Debug: APP_STORE_ISSUER_ID = $APP_STORE_ISSUER_ID"
    #   echo "üîç Debug: APP_STORE_KEY_BASE64 length = ${#APP_STORE_KEY_BASE64}"
    #
    # # Export environment variables for Fastlane (explicitly export all required vars)
    # - export APP_STORE_KEY_BASE64="$APP_STORE_KEY_BASE64"
    # - export APP_STORE_KEY_ID="$APP_STORE_KEY_ID"
    # - export APP_STORE_ISSUER_ID="$APP_STORE_ISSUER_ID"
    # - export FASTLANE_SKIP_INTERACTIVE=1
    # - export FASTLANE_HIDE_TIMESTAMP=1
    #
    # # Run Fastlane upload
    # - echo "Starting Fastlane upload to TestFlight..."
    # - |
    #   if fastlane upload_testflight 2>&1 | tee fastlane_upload.log; then
    #     echo "‚úÖ Successfully uploaded IPA to TestFlight!"
    #   else
    #     echo "‚ùå Fastlane upload failed. Check fastlane_upload.log for details."
    #     tail -n 100 fastlane_upload.log
    #     handle_xcode_error "Fastlane upload to TestFlight failed" "fastlane_upload.log"
    #   fi
    # ========================================================================

    - cd "$CI_PROJECT_DIR"
    - *common_update_version

    # Retrieve changelog
    - |
      if [ -f "changelog.txt" ]; then
        export CHANGELOG=$(cat changelog.txt)
        echo "Changelog retrieved from changelog.txt:"
        echo "$CHANGELOG"
      else
        export CHANGELOG="No changelog available"
        echo "No changelog.txt found. Using default message."
      fi

    #
    # Send slack message with changelog
    - echo "Loading Slack message template..."
    - export MESSAGE_TEMPLATES_FILE="$CI_PROJECT_DIR/Assets/cicd/ci/message_templates.json"
    - | # Use block scalar for multi-line script
      if [ -z "$SLACK_USER_IDS" ]; then export NOTIFY_USERS=""; else export NOTIFY_USERS=$(echo "$SLACK_USER_IDS" | awk -F',' '{for (i=1; i<=NF; i++) printf "<@%s> ", $i}'); fi
      template_key="uploaded_to_test_flight"
      if [ ! -f "$MESSAGE_TEMPLATES_FILE" ]; then
        echo "[ERROR] Message template file not found: $MESSAGE_TEMPLATES_FILE"
        exit 1
      fi
      message=$(jq -r --arg key "$template_key" '.[$key]' "$MESSAGE_TEMPLATES_FILE")

      if [ -z "$message" ] || [ "$message" == "null" ]; then
        echo "[ERROR] Message template not found for key: $template_key in $MESSAGE_TEMPLATES_FILE"
        exit 1
      fi

      # Add changelog to the message
      formatted_message=$(printf "$message\n\nüìù *Change Log:*\n\`\`\`\n%s\n\`\`\`\n\n%s" "$CHANGELOG" "${NOTIFY_USERS}" | sed \
        -e "s/{project_name}/${PROJECT_NAME}/g" \
        -e "s/{platform}/üçèiOS/g" \
        -e "s/{build_name}/${CURRENT_VERSION}/g")

      echo "Formatted Slack message:"
      echo "$formatted_message"

    - python3 "$CI_PROJECT_DIR/Assets/cicd/ci/send_slack_message.py" "$SLACK_CHANNEL_ID" "$formatted_message" "$SLACK_BOT_TOKEN"

    # ========================================================================
    # Build IPA Debug with Firebase Debug Flag
    # ========================================================================
    - echo ""
    - echo "=================================================="
    - echo "üî• Building IPA Debug with Firebase Debug Mode..."
    - echo "=================================================="

    # Navigate back to Xcode project directory
    - cd "$CI_PROJECT_DIR/Build/iOS"

    # Add FIRDebugEnabled flag to Info.plist
    - echo "Adding FIRDebugEnabled flag to Info.plist..."
    - export INFO_PLIST_PATH="$CI_PROJECT_DIR/Build/iOS/Info.plist"
    - |
      if [ -f "$INFO_PLIST_PATH" ]; then
        echo "Found Info.plist at $INFO_PLIST_PATH"

        # Delete existing LSApplicationLaunchArguments if exists
        /usr/libexec/PlistBuddy -c "Delete :LSApplicationLaunchArguments" "$INFO_PLIST_PATH" 2>/dev/null || true

        # Add new LSApplicationLaunchArguments array with FIRDebugEnabled
        /usr/libexec/PlistBuddy -c "Add :LSApplicationLaunchArguments array" "$INFO_PLIST_PATH"
        /usr/libexec/PlistBuddy -c "Add :LSApplicationLaunchArguments:0 string -FIRDebugEnabled" "$INFO_PLIST_PATH"

        echo "‚úÖ FIRDebugEnabled flag added successfully"

        # Verify the change
        echo "Verifying Info.plist changes:"
        /usr/libexec/PlistBuddy -c "Print :LSApplicationLaunchArguments" "$INFO_PLIST_PATH" || echo "Could not print LSApplicationLaunchArguments"
      else
        echo "‚ö†Ô∏è Warning: Info.plist not found at $INFO_PLIST_PATH"
        echo "Continuing without adding FIRDebugEnabled flag..."
      fi

    # Refresh Keychain session before second export
    - echo ""
    - echo "üîë Refreshing Keychain session for debug IPA export..."
    - security unlock-keychain -p "" ~/Library/Keychains/login.keychain-db 2>/dev/null || true

    # Build and export debug IPA
    - |
      if [ -d "Unity-iPhone.xcworkspace" ]; then
        echo "Building debug IPA from workspace..."
        export ARCHIVE_PATH_DEBUG="$CI_PROJECT_DIR/Build/iOS/${PROJECT_NAME}_${CURRENT_VERSION}_firebase_debug.xcarchive"
        export EXPORT_LOG_PATH_DEBUG="$CI_PROJECT_DIR/export_debug.log"
        export ARCHIVE_LOG_PATH_DEBUG="$CI_PROJECT_DIR/archive_debug.log"

        echo "Archiving debug build to $ARCHIVE_PATH_DEBUG"
        xcodebuild -workspace Unity-iPhone.xcworkspace -scheme Unity-iPhone -configuration Release \
          -archivePath "$ARCHIVE_PATH_DEBUG" \
          -allowProvisioningUpdates -allowProvisioningDeviceRegistration \
          DEVELOPMENT_TEAM="$IOS_DEVELOPMENT_TEAM" \
          -quiet archive -derivedDataPath "$XCODE_DERIVED_DATA_PATH" \
          > "$ARCHIVE_LOG_PATH_DEBUG" 2>&1 || {
            echo "‚ö†Ô∏è Warning: Debug archive failed. Check log for details."
            tail -n 50 "$ARCHIVE_LOG_PATH_DEBUG"
            echo "Continuing without debug IPA..."
          }

        if [ -f "$ARCHIVE_PATH_DEBUG/Info.plist" ]; then
          echo "‚úÖ Debug archive completed successfully"

          echo "Exporting debug archive..."
          if [ ! -f "$CI_PROJECT_DIR/Assets/cicd/exportOptionsPlist.plist" ]; then
            echo "‚ö†Ô∏è Warning: exportOptionsPlist.plist not found"
            echo "Continuing without debug IPA export..."
          else
            # Refresh Keychain session again before export
            echo "üîë Refreshing Keychain session before export..."
            security unlock-keychain -p "" ~/Library/Keychains/login.keychain-db 2>/dev/null || true

            xcodebuild -exportArchive -archivePath "$ARCHIVE_PATH_DEBUG" \
              -exportPath "$CI_PROJECT_DIR/Build/iOS/ExportedIPA_Debug" \
              -exportOptionsPlist "$CI_PROJECT_DIR/Assets/cicd/exportOptionsPlist.plist" \
              -allowProvisioningUpdates \
              -quiet \
              > "$EXPORT_LOG_PATH_DEBUG" 2>&1 || {
                echo "‚ö†Ô∏è Warning: Debug export failed. Check log for details."
                tail -n 50 "$EXPORT_LOG_PATH_DEBUG"
                echo "Continuing without debug IPA..."
              }

            # Check if debug IPA was created
            DEBUG_IPA_FILE=$(find "$CI_PROJECT_DIR/Build/iOS/ExportedIPA_Debug" -name "*.ipa" 2>/dev/null | head -1)
            if [ -n "$DEBUG_IPA_FILE" ] && [ -f "$DEBUG_IPA_FILE" ]; then
              echo "‚úÖ Debug IPA exported successfully!"
              DEBUG_IPA_SIZE=$(ls -lh "$DEBUG_IPA_FILE" | awk '{print $5}')
              echo "üì± Debug IPA file: $DEBUG_IPA_FILE"
              echo "üìä Debug IPA size: $DEBUG_IPA_SIZE"

              # Upload debug IPA to Slack
              echo ""
              echo "üì§ Uploading debug IPA to Slack..."
              DEBUG_CHANGELOG="üî• Firebase Debug Mode IPA - Version ${CURRENT_VERSION}\n\n‚ö†Ô∏è This build has Firebase Debug Mode enabled for QA testing.\nUse this to verify Firebase Analytics events in DebugView.\n\nüìù Based on the same build as Release IPA (TestFlight upload skipped)."

              if python3 Assets/cicd/ci/upload_slack.py "$DEBUG_IPA_FILE" "$DEBUG_CHANGELOG" "$SLACK_USER_IDS"; then
                echo "‚úÖ Successfully uploaded debug IPA to Slack!"
              else
                echo "‚ö†Ô∏è Warning: Failed to upload debug IPA to Slack"
                echo "Debug IPA is available in artifacts"
              fi
            else
              echo "‚ö†Ô∏è Warning: Debug IPA file not found after export"
              echo "Check export_debug.log for details"
            fi
          fi
        else
          echo "‚ö†Ô∏è Debug archive was not created successfully"
        fi

      elif [ -d "Unity-iPhone.xcodeproj" ]; then
        echo "Building debug IPA from project..."
        export ARCHIVE_PATH_DEBUG="$CI_PROJECT_DIR/Build/iOS/${PROJECT_NAME}_${CURRENT_VERSION}_firebase_debug.xcarchive"
        export EXPORT_LOG_PATH_DEBUG="$CI_PROJECT_DIR/export_debug.log"
        export ARCHIVE_LOG_PATH_DEBUG="$CI_PROJECT_DIR/archive_debug.log"

        echo "Archiving debug build to $ARCHIVE_PATH_DEBUG"
        xcodebuild -project Unity-iPhone.xcodeproj -scheme Unity-iPhone -configuration Release \
          -archivePath "$ARCHIVE_PATH_DEBUG" \
          -allowProvisioningUpdates -allowProvisioningDeviceRegistration \
          DEVELOPMENT_TEAM="$IOS_DEVELOPMENT_TEAM" \
          -quiet archive -derivedDataPath "$XCODE_DERIVED_DATA_PATH" \
          > "$ARCHIVE_LOG_PATH_DEBUG" 2>&1 || {
            echo "‚ö†Ô∏è Warning: Debug archive failed. Check log for details."
            tail -n 50 "$ARCHIVE_LOG_PATH_DEBUG"
            echo "Continuing without debug IPA..."
          }

        if [ -f "$ARCHIVE_PATH_DEBUG/Info.plist" ]; then
          echo "‚úÖ Debug archive completed successfully"

          echo "Exporting debug archive..."
          if [ ! -f "$CI_PROJECT_DIR/Assets/cicd/exportOptionsPlist.plist" ]; then
            echo "‚ö†Ô∏è Warning: exportOptionsPlist.plist not found"
            echo "Continuing without debug IPA export..."
          else
            # Refresh Keychain session again before export
            echo "üîë Refreshing Keychain session before export..."
            security unlock-keychain -p "" ~/Library/Keychains/login.keychain-db 2>/dev/null || true

            xcodebuild -exportArchive -archivePath "$ARCHIVE_PATH_DEBUG" \
              -exportPath "$CI_PROJECT_DIR/Build/iOS/ExportedIPA_Debug" \
              -exportOptionsPlist "$CI_PROJECT_DIR/Assets/cicd/exportOptionsPlist.plist" \
              -allowProvisioningUpdates \
              -quiet \
              > "$EXPORT_LOG_PATH_DEBUG" 2>&1 || {
                echo "‚ö†Ô∏è Warning: Debug export failed. Check log for details."
                tail -n 50 "$EXPORT_LOG_PATH_DEBUG"
                echo "Continuing without debug IPA..."
              }

            # Check if debug IPA was created
            DEBUG_IPA_FILE=$(find "$CI_PROJECT_DIR/Build/iOS/ExportedIPA_Debug" -name "*.ipa" 2>/dev/null | head -1)
            if [ -n "$DEBUG_IPA_FILE" ] && [ -f "$DEBUG_IPA_FILE" ]; then
              echo "‚úÖ Debug IPA exported successfully!"
              DEBUG_IPA_SIZE=$(ls -lh "$DEBUG_IPA_FILE" | awk '{print $5}')
              echo "üì± Debug IPA file: $DEBUG_IPA_FILE"
              echo "üìä Debug IPA size: $DEBUG_IPA_SIZE"

              # Upload debug IPA to Slack
              echo ""
              echo "üì§ Uploading debug IPA to Slack..."
              DEBUG_CHANGELOG="üî• Firebase Debug Mode IPA - Version ${CURRENT_VERSION}\n\n‚ö†Ô∏è This build has Firebase Debug Mode enabled for QA testing.\nUse this to verify Firebase Analytics events in DebugView.\n\nüìù Based on the same build as Release IPA (TestFlight upload skipped)."

              if python3 Assets/cicd/ci/upload_slack.py "$DEBUG_IPA_FILE" "$DEBUG_CHANGELOG" "$SLACK_USER_IDS"; then
                echo "‚úÖ Successfully uploaded debug IPA to Slack!"
              else
                echo "‚ö†Ô∏è Warning: Failed to upload debug IPA to Slack"
                echo "Debug IPA is available in artifacts"
              fi
            else
              echo "‚ö†Ô∏è Warning: Debug IPA file not found after export"
              echo "Check export_debug.log for details"
            fi
          fi
        else
          echo "‚ö†Ô∏è Debug archive was not created successfully"
        fi
      else
        echo "‚ö†Ô∏è Warning: No Xcode workspace or project found for debug build"
      fi

    - cd "$CI_PROJECT_DIR"
    - echo ""
    - echo "=================================================="
    - echo "‚úÖ Build process completed!"
    - echo "   - Release IPA Uploaded to Slack ‚úàÔ∏è (TestFlight SKIPPED)"
    - echo "   - Debug IPA Uploaded to Slack üî•"
    - echo "=================================================="

  after_script:
    # Ensure we're in the correct working directory
    - echo "üìç Ensuring correct working directory..."
    - cd "$CI_PROJECT_DIR" || { echo "‚ùå Failed to change to CI_PROJECT_DIR"; exit 1; }
    - echo "‚úÖ Current directory $(pwd)"

    # Wait for file system sync (important on macOS APFS)
    - echo "‚è≥ Waiting for file system sync..."
    - sleep 3
    - sync

    # Debug: Display directory structure
    - echo "üîç Project directory structure:"
    - echo "   - CI_PROJECT_DIR $CI_PROJECT_DIR"
    - echo "   - Current PWD $(pwd)"
    - echo "   - Disk usage:"
    - du -sh "$CI_PROJECT_DIR" 2>/dev/null || echo "Cannot calculate size"
    - |
      echo "   - Top-level contents:"
      ls -lah "$CI_PROJECT_DIR" | head -20 || echo "Cannot list directory"
    - |
      if [ -d "$CI_PROJECT_DIR/Build/iOS" ]; then
        echo "   - Build/iOS contents:"
        ls -lah "$CI_PROJECT_DIR/Build/iOS" | head -20 || echo "Cannot list Build/iOS"
      else
        echo "   - Build/iOS directory does not exist"
      fi

    # Verify external disk
    - echo ""
    - echo "üîç Verifying external disk before backup..."
    - chmod +x "$CI_PROJECT_DIR/Assets/cicd/ci/verify_external_disk.sh"
    - "$CI_PROJECT_DIR/Assets/cicd/ci/verify_external_disk.sh"

    # Start backup process
    - echo ""
    - echo "üîß Starting full project backup with enhanced verification..."
    - chmod +x "$CI_PROJECT_DIR/Assets/cicd/ci/backup_ios_build.sh"
    - "$CI_PROJECT_DIR/Assets/cicd/ci/backup_ios_build.sh"

  artifacts:
    paths:
      - build_output.log
      - archive_release.log
      - export_release.log
      - archive_debug.log
      - export_debug.log
      - fastlane_upload.log
      - fastlane/
      - Build/iOS/ExportedIPA_Debug/*.ipa
    when: always
    expire_in: 1 days


